/*
A Hamming number is a positive integer of the form 2^i*3^j*5^k, for some non-negative integers i, j, and k.
Write a function that computes the nth smallest Hamming number.

Specifically:
The first smallest Hamming number is 1 = 2^0*3^0*5^0
The second smallest Hamming number is 2 = 2^1*3^0*5^0
The third smallest Hamming number is 3 = 2^0*3^1*5^0
The fourth smallest Hamming number is 4 = 2^2*3^0*5^0
The fifth smallest Hamming number is 5 = 2^0*3^0*5^1
The 20 smallest Hamming numbers are given in example test fixture.

Your code should be able to compute all of the smallest 5,000 (Clojure: 2000, NASM: 13282) Hamming numbers without timing out.
*/

function hamming (n) {
  let hammings = [1]
  let i = 1 
  while (hammings.length <= n) {
    let v = i
    while (!(v % 2) || !(v % 3) || !(v % 5)) {
      if (!(v % 2)) { v = v / 2 }
      if (!(v % 3)) { v = v / 3 }
      if (!(v % 5)) { v = v / 5 }
    } 
    if (v == 1) { hammings.push(i) }
    i++
  }
  return hammings[n]
}
